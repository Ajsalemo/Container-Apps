{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "canadacentral"
    },
    "environmentName": {
      "type": "string",
      "defaultValue": "[concat('ContainerAppEnv-', uniqueString(resourceGroup().id))]"
    },
    "httpbackendserviceCI": {
      "type": "string",
      "defaultValue": "docker.io/gfakedocker/daprservicebackendnodejs:latest"
    },
    "httpfrontendserviceCI": {
      "type": "string",
      "defaultValue": "docker.io/gfakedocker/daprservicefrontendnodejs:latest"
    },
    "httpbackendservice": {
      "type": "string",
      "defaultValue": "httpbackendservicenodejs"
    },
    "httpfrontendservice": {
      "type": "string",
      "defaultValue": "httpfrontendservicenodejs"
    },
    "backendappId": {
      "type": "string",
      "defaultValue": "backendapp"
    },
    "frontendappId": {
      "type": "string",
      "defaultValue": "frontendapp"
    },
    "useConsumptionWorkloadProfile": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "If you deployed a workload-profile enabled Container App Environment, set the useConsumptionWorkloadProfile parameter to true so that the Container App is deployed to the Consumption profile. Otherwise, if you deployed a Container App Environment without workload profiles enabled, set this parameter to false."
      }
    }
  },
  "variables": {
    "APP_PORT": "5000"
  },
  "resources": [
    {
      "name": "[parameters('httpbackendservice')]",
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]",
		"workloadProfileName": "[if(parameters('useConsumptionWorkloadProfile'), 'Consumption', json('null'))]",
        "configuration": {
          "ingress": {
            "external": false,
            "targetPort": "[variables('APP_PORT')]"
          },
          "secrets": [
          ],
          "dapr": {
            "enabled": true,
            "appPort": "[variables('APP_PORT')]",
            "appId": "[parameters('backendappId')]"
          }
        },
        "template": {
          "containers": [
            {
              "name": "[parameters('httpbackendservice')]",
              "image": "[parameters('httpbackendserviceCI')]",
              "env": [
                {
                  "name": "APP_PORT",
                  "value": "[variables('APP_PORT')]"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": "0",
            "maxReplicas": "10",
            "rules": [
              {
                "name": "httpscalingrule",
                "http": {
                  "metadata": {
                    "concurrentRequests": "100"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "[parameters('httpfrontendservice')]",
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[parameters('httpbackendservice')]"
      ],
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('environmentName'))]",
		"workloadProfileName": "[if(parameters('useConsumptionWorkloadProfile'), 'Consumption', json('null'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": "[variables('APP_PORT')]"
          },
          "dapr": {
            "enabled": true,
            "appPort": "[variables('APP_PORT')]",
            "appId": "[parameters('frontendappId')]"
          }
        },
        "template": {
          "containers": [
            {
              "name": "[parameters('httpfrontendservice')]",
              "image": "[parameters('httpfrontendserviceCI')]",
              "env": [
                {
                  "name": "APP_PORT",
                  "value": "[variables('APP_PORT')]"
                }
              ]
            }
          ],
          "scale": {
            "minReplicas": "0",
            "maxReplicas": "10",
            "rules": [
              {
                "name": "httpscalingrule",
                "http": {
                  "metadata": {
                    "concurrentRequests": "10"
                  }
                }
              }
            ]
          }
        }
      }
    }
  ]
}